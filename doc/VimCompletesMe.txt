*VimCompletesMe.txt*    Minimalistic tab completion for Vim.


                        VIM REFERENCE MANUAL    by Akshay Hegde


Help on using VimCompletesMe                                   *VimCompletesMe*

1. Introduction                         |VimCompletesMe-intro|
2. Configuration                        |VimCompletesMe-configuration|
3. Frequently Asked Questions           |VimCompletesMe-faq|

==============================================================================
 1. INTRODUCTION                                         *VimCompletesMe-intro*

VimCompletesMe is a minimalistic Vim plugin that lets the user complete the currently typed text by hitting the <tab> key.

It uses Vim's built-in |ins-completion| methods depending on the context.
The completion methods, the order and the context in which they are used are
fully customizable.

If a file-path is completed to a directory name, ending in '/' (or '\' on MS Windows) then the completion can be reiterated by hitting this delimiter, that is, '\' (or '\' on MS Windows).

==============================================================================
2. CONFIGURATION                                 *VimCompletesMe-configuration*

The following variables :

|'g:vim_completions'|           global dictionary of completion methods.
|'b:vcm_completions'|           buffer-local dictionary of completion methods.

------------------------------------------------------------------------------
                                                         *'g:vcm_completions'*

Configures the order and context in which one of the following completion methods is used after the |<tab>| key is hit:

1. File Path   completion                     (|i_Ctrl-X_Ctrl-F|)
2. Omni        completion                     (|i_Ctrl-X_Ctrl-O|)
3. User        completion                     (|i_Ctrl-X_Ctrl-O|)
4. Line        completion                     (|i_Ctrl-X_Ctrl-O|)
5. Vim         completion                     (|i_Ctrl-X_Ctrl-O|)
6. Spell Check completion                     (|i_Ctrl-X_Ctrl-O|)
7. Generic     completion                     (|i_Ctrl-N|)

and which defaults to
>
let g:vcm_completions = {
  \ 'file':  {'rank': 10,
  \           'keys': "\<C-x>\<C-f>",
  \           'pattern': '\v' . (has('win32') ? '\f\\' : '\/') . '\f*$' },
  \ 'omni':  {'rank': 20,
  \           'keys': "\<C-x>\<C-o>",
  \           'pattern': '\v\k+(\.|->|::)\k*$' },
  \ 'user':  {'rank': 30,
  \           'keys': "\<C-x>\<C-u>",
  \           'pattern': 0 },
  \ 'line':  {'rank': 40,
  \           'keys': "\<C-x>\<C-l>",
  \           'pattern': '\v^\s*\k+$' },
  \ 'spell': {'rank': 50,
  \           'keys': "\<C-x>\<C-s>",
  \           'pattern': 0 },
  \ 'vim':   {'rank': 60,
  \           'keys': "\<C-x>\<C-v>",
  \           'pattern': 0 },
  \ 'gen':   {'rank': 99,
  \           'keys': "\<C-n>",
  \           'pattern': '\v\k+$' },
  \ }
<
where, for each completion method ('file', 'omni', ...),

      - 'rank' defines the order in which the completion methods are tried,
      the lower the earlier,
      - 'pattern' defines the regular expression that must match the text from
      the start of the current line up to the cursor (and which never matches
      if set to 0), and
      - 'keys' defines the keys that must be hit to complete by the method.

When none of the special completions above get any results,
you can press Tab again to force Vim's generic keyword completion.

                                                         *'b:vcm_completions'*

Configures buffer-locally the order and context in which one of the above
completion methods is used after the |<tab>| key is hit. It is best set by a
FileType autocmd such as:
>
    autocmd FileType vim
    \ let b:vcm_completions = deepcopy(g:vcm_completions) |
    \ b:vcm_completions.vim.rank=0
<

In some situations (like after completing something and then trying the
context switch again without leaving insert mode), you may need a Vim
version greater than 7.3.598 to get the best context switch behavior.

==============================================================================
 3. FREQUENTLY ASKED QUESTIONS                             *VimCompletesMe-faq*

1. When the popup menu is opened, how can I make the Enter key select the     ~
   completion entry instead of creating a new line?                           ~

Solution: Just make a mapping like the following, in your |vimrc|:
>
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
<

2. How do I make VimCompletesMe work with various snippet engines?         ~

A simple solution is to ensure that the Tab and Shift-Tab keys do not conflict
with any other plugins. Thus, you can either disable VimCompletesMe's
|vcm_default_maps| option or use a different forward and backward triggers for
the snippet engines.

For the first case, simply assign a different key to act as the Tab key for
<Plug>vim_completes_me_forward, or the Shift-Tab key for
<Plug>vim_completes_me_backward functions.

For the second case, simply assign different keys to act as the snippet
engines forward and backward triggers. A suggestion would be to map `<C-j>`
and `<C-k>` in insert mode. Note that while |i_Ctrl-j| does nothing useful in
insert mode, you might be using |i_Ctrl-k| for digraphs. These keybinds are
merely suggestions.

@sunaku from Github has a great solution to make VimCompletesMe work with
Neosnippet. See
https://github.com/ajh17/VimCompletesMe/issues/12#issuecomment-94115124
------------------------------------------------------------------------------

Template From: https://github.com/dahu/Area-41/
vim:tw=78:et:ft=help:norl:
